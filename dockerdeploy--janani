pipeline {
    agent {  label "java" }
      environment {
        NEXUS_URL = 'http://13.232.236.121:8081/repository/maven-releases/'    // always change the ip address
        WAR_FILE = 'SimpleWebApplication.war'  // Specify the WAR file name
        DOCKER_IMAGE_NAME = 'jjjjj'            //change the image name
        DOCKER_TAG = 'latest'  // Specify your Docker tag
        CONTAINER_NAME = 'Dockerfile'
    }

    stages {
        stage('Build') {
            steps {
                sh 'mvn clean install'
            }
        }
        stage('jacoco') {
            steps {
                jacoco()
            }
        }
    stage('Upload to Nexus') {
      steps {
        nexusArtifactUploader artifacts: [[
          artifactId: 'SimpleWebApplication', 
          classifier: '', 
          file: 'target/SimpleWebApplication.war', 
          type: 'war'
        ]], 
        credentialsId: 'nexus_credentials', 
        groupId: 'com.maven', 
        nexusUrl: '13.232.236.121:8081', // always change the ip address
        nexusVersion: 'nexus3', 
        protocol: 'http', 
        repository: 'maven-releases', 
        version: '9.1.14'
      }
    }
        stage('Pull WAR from Nexus') {
         agent {  label "docker" }
            steps {
                script {
                    // Pull the WAR file from Nexus
                    sh 'pwd'
                    sh """
                    curl -u 'username:password' -O ${NEXUS_URL}/${WAR_FILE}
                    """
                }
            }
}
        
  stage('Build Docker Image') {
agent {  label "docker" }
            steps {
                script {
                    sh 'pwd'
                    sh 'ls -la'
                    // Build the Docker image
                    sh """
                    docker build -f Dockerfile -t ${DOCKER_IMAGE_NAME}:${DOCKER_TAG} .
                    """
                }
            }
        }
stage('Run Docker Container') {
agent {  label "docker" }
            steps {
                script {
                    // Stop and remove the container if it already exists
                    sh """
                    docker rm -f ${CONTAINER_NAME} || true
                    docker run -d --name ${CONTAINER_NAME} -p 5555:8080 ${DOCKER_IMAGE_NAME}:${DOCKER_TAG}  //enable the port 5555 
                    """
                }
            }
        }

}
}

/*
//This the Docker file present in /home/ubuntu/workspace/dockercicd/Dockerfile
//your war also gets delpyed here in /home/ubuntu/workspace/dockercicd
ROM ubuntu
RUN apt-get update -y && \
    apt install openjdk-17-jdk wget tar vim -y && \
    rm -rf /var/lib/apt/lists/*
RUN mkdir -p /home/tomcatcar && \
    useradd -d /home/tomcatcar -s /bin/bash tomcatcar
ADD https://dlcdn.apache.org/tomcat/tomcat-9/v9.0.96/bin/apache-tomcat-9.0.96.tar.gz /home/tomcatcar/
RUN pwd
RUN tar -zxvf /home/tomcatcar/apache-tomcat-9.0.96.tar.gz -C /home/tomcatcar && \
    rm -rf /home/tomcatcar/apache-tomcat-9.0.96.tar.gz && \
    mv /home/tomcatcar/apache-tomcat-9.0.96 /home/tomcatcar/tomcatcar && \
    chown -R tomcatcar:tomcatcar /home/tomcatcar/tomcatcar
ENV ADMIN_USER=admin
ENV ADMIN_PASSWORD=passw0rd
RUN wget --user=admin --password=passw0rd -O /home/tomcatcar/tomcatcar/webapps/SimpleWebApplication-9.1.14.war \
    http://13.127.19.239:8081/repository/maven-releases/com/maven/SimpleWebApplication/9.1.14/SimpleWebApplication-9.1.14.war
USER tomcatcar
EXPOSE 8080
CMD ["/home/tomcatcar/tomcatcar/bin/catalina.sh", "run"]

//manually do the following steps
//get into your container and add roles and comment vale tags
//make sure to start the image -- docker start Dockerfile
//docker exec -it Dockerfile /bin/bash
// cd /home/tomcatcar1/tomcatcar1/
// you will find conf and weapps directory to make the configurations
// access via browser to see the application deployed -- http://15.206.212.165:5555/SimpleWebApplication-9.1.14/

*/

