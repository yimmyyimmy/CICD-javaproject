pipeline {
    agent {  label "java" }
      environment {
        NEXUS_URL = 'http://13.232.236.121:8081/repository/maven-releases/'
        WAR_FILE = 'SimpleWebApplication.war'  // Specify the WAR file name
        DOCKER_IMAGE_NAME = 'jjjjj'
        DOCKER_TAG = 'latest'  // Specify your Docker tag
        CONTAINER_NAME = 'Dockerfile'
    }

    stages {
        stage('Build') {
            steps {
                sh 'mvn clean install'
            }
        }
        stage('jacoco') {
            steps {
                jacoco()
            }
        }
    stage('Upload to Nexus') {
      steps {
        nexusArtifactUploader artifacts: [[
          artifactId: 'SimpleWebApplication', 
          classifier: '', 
          file: 'target/SimpleWebApplication.war', 
          type: 'war'
        ]], 
        credentialsId: 'nexus_credentials', 
        groupId: 'com.maven', 
        nexusUrl: '13.232.236.121:8081', // Ensure protocol is included
        nexusVersion: 'nexus3', 
        protocol: 'http', 
        repository: 'maven-releases', 
        version: '9.1.14'
      }
    }
        stage('Pull WAR from Nexus') {
         agent {  label "docker" }
            steps {
                script {
                    // Pull the WAR file from Nexus
                    sh """
                    curl -u 'username:password' -O ${NEXUS_URL}/${WAR_FILE}
                    """
                }
            }
}
        
  stage('Build Docker Image') {
agent {  label "docker" }
            steps {
                script {
                    sh 'pwd'
                    sh 'ls -la'
                    // Build the Docker image
                    sh """
                    docker build -f Dockerfile -t ${DOCKER_IMAGE_NAME}:${DOCKER_TAG} .
                    """
                }
            }
        }
stage('Run Docker Container') {
agent {  label "docker" }
            steps {
                script {
                    // Stop and remove the container if it already exists
                    sh """
                    docker rm -f ${CONTAINER_NAME} || true
                    docker run -d --name ${CONTAINER_NAME} -p 5050:8080 ${DOCKER_IMAGE_NAME}:${DOCKER_TAG}
                    """
                }
            }
        }
/*
        stage('run the container')
            {
            agent { label 'docker' }
       steps{
           sshagent(['docker_ssh_agent_cred_to_run']) {
         //sh 'ssh -o StrictHostKeyChecking=no ubuntu@172.31.3.167 "docker run -d -p 5050:8080 tommy"'
         //sh "ssh -i /home/ec2-user/Linux.pem ubuntu@172.31.3.167 'docker run -d -p 5050:8080 tommy'"
}
}
      }
*/
}
}


